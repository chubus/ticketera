#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de verificaci√≥n final del sistema de credenciales
"""

import os
import sys
from flask import Flask
from werkzeug.security import generate_password_hash, check_password_hash
from models import db, User

def crear_app():
    """Crear aplicaci√≥n Flask para verificaci√≥n"""
    app = Flask(__name__)
    
    # Configuraci√≥n de base de datos
    db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'belgrano_tickets.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = 'belgrano_tickets_secret_2025'
    
    # Inicializar extensiones
    db.init_app(app)
    
    return app

def verificar_sistema_completo():
    """Verificaci√≥n completa del sistema"""
    app = crear_app()
    
    with app.app_context():
        try:
            print("üîç VERIFICACI√ìN COMPLETA DEL SISTEMA - BELGRANO TICKETS")
            print("=" * 70)
            
            # 1. Verificar base de datos
            print("\n1Ô∏è‚É£ VERIFICANDO BASE DE DATOS...")
            if not os.path.exists(app.config['SQLALCHEMY_DATABASE_URI'].replace('sqlite:///', '')):
                print("‚ùå Base de datos no encontrada")
                return False
            print("‚úÖ Base de datos encontrada")
            
            # 2. Verificar usuarios
            print("\n2Ô∏è‚É£ VERIFICANDO USUARIOS...")
            usuarios = User.query.all()
            print(f"   Total usuarios: {len(usuarios)}")
            
            if len(usuarios) == 0:
                print("‚ùå No hay usuarios en la base de datos")
                return False
            
            # 3. Verificar admin
            print("\n3Ô∏è‚É£ VERIFICANDO ADMINISTRADOR...")
            admin = User.query.filter_by(email='admin@belgranoahorro.com').first()
            
            if not admin:
                print("‚ùå Usuario admin no encontrado")
                return False
            
            print(f"‚úÖ Admin encontrado: {admin.nombre}")
            print(f"   Email: {admin.email}")
            print(f"   Role: {admin.role}")
            print(f"   Activo: {admin.activo}")
            
            # Verificar contrase√±a admin
            admin_password_ok = check_password_hash(admin.password, 'admin123')
            print(f"   Contrase√±a 'admin123': {'‚úÖ CORRECTO' if admin_password_ok else '‚ùå INCORRECTO'}")
            
            if not admin_password_ok:
                print("üîß Regenerando contrase√±a admin...")
                admin.password = generate_password_hash('admin123')
                db.session.commit()
                admin_password_ok = check_password_hash(admin.password, 'admin123')
                print(f"   Contrase√±a despu√©s de regenerar: {'‚úÖ CORRECTO' if admin_password_ok else '‚ùå INCORRECTO'}")
            
            # 4. Verificar flota
            print("\n4Ô∏è‚É£ VERIFICANDO USUARIOS FLOTA...")
            flota_users = User.query.filter_by(role='flota').all()
            print(f"   Total usuarios flota: {len(flota_users)}")
            
            flota_ok = True
            for user in flota_users:
                password_ok = check_password_hash(user.password, 'flota123')
                status = "‚úÖ" if password_ok else "‚ùå"
                print(f"   {user.email}: {status}")
                if not password_ok:
                    flota_ok = False
                    # Regenerar contrase√±a
                    user.password = generate_password_hash('flota123')
            
            if not flota_ok:
                db.session.commit()
                print("üîß Contrase√±as de flota regeneradas")
            
            # 5. Verificar estructura de datos
            print("\n5Ô∏è‚É£ VERIFICANDO ESTRUCTURA DE DATOS...")
            for user in usuarios:
                campos_requeridos = ['username', 'email', 'password', 'role', 'nombre', 'activo']
                campos_faltantes = []
                
                for campo in campos_requeridos:
                    if not hasattr(user, campo) or getattr(user, campo) is None:
                        campos_faltantes.append(campo)
                
                if campos_faltantes:
                    print(f"‚ùå Usuario {user.email} - campos faltantes: {campos_faltantes}")
                else:
                    print(f"‚úÖ Usuario {user.email} - estructura correcta")
            
            # 6. Resumen final
            print("\n" + "=" * 70)
            print("üéØ RESUMEN DE VERIFICACI√ìN:")
            print(f"   ‚Ä¢ Base de datos: ‚úÖ")
            print(f"   ‚Ä¢ Total usuarios: {len(usuarios)}")
            print(f"   ‚Ä¢ Admin: {'‚úÖ' if admin_password_ok else '‚ùå'}")
            print(f"   ‚Ä¢ Flota: {'‚úÖ' if flota_ok else '‚ùå'}")
            
            if admin_password_ok and flota_ok:
                print("\n‚úÖ SISTEMA VERIFICADO - TODO FUNCIONANDO CORRECTAMENTE")
                print("\nüîê CREDENCIALES DE ACCESO:")
                print("   üë®‚Äçüíº ADMIN:")
                print("      Email: admin@belgranoahorro.com")
                print("      Password: admin123")
                print("   üöö FLOTA:")
                print("      Email: repartidor1@belgranoahorro.com")
                print("      Password: flota123")
                print("\nüöÄ INSTRUCCIONES:")
                print("   1. Ejecuta: python app.py")
                print("   2. Ve a: http://localhost:5001")
                print("   3. Usa las credenciales mostradas arriba")
                return True
            else:
                print("\n‚ùå SISTEMA CON PROBLEMAS - REVISAR CREDENCIALES")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n: {e}")
            return False

if __name__ == "__main__":
    success = verificar_sistema_completo()
    
    if success:
        print("\nüéâ ¬°Sistema listo para usar!")
    else:
        print("\nüí• Sistema necesita reparaci√≥n")
        sys.exit(1)
